// Mixins
@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin button-style($bg-color, $text-color) {
  background-color: $bg-color;
  color: $text-color;
  padding: $spacing-unit * 2 $spacing-unit * 3;
  border-radius: $border-radius;
  border: none;
  cursor: pointer;
  transition: all 0.3s ease;
  
  &:hover {
    background-color: darken($bg-color, 10%);
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
}

@mixin respond-to($breakpoint) {
  @if $breakpoint == sm {
    @media (min-width: $breakpoint-sm) { @content; }
  } @else if $breakpoint == md {
    @media (min-width: $breakpoint-md) { @content; }
  } @else if $breakpoint == lg {
    @media (min-width: $breakpoint-lg) { @content; }
  }
}

// Breakpoint mixin
@mixin breakpoint($size) {
  @if map-has-key($breakpoints, $size) {
    @media screen and (min-width: map-get($breakpoints, $size)) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$size}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

// Functions
@function calculate-width($columns, $total: 12) {
  @return percentage($columns / $total);
}
